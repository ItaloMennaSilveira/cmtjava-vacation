package test.VACATION;
import stm.*;

class Vacation {

public Vacation() {
}

public static void displayUsage (String appName) {
	System.out.println("Usage: %s [options]\n"+ appName);
	System.out.println("\nOptions:                                             (defaults)\n");
	System.out.println("    c <UINT>   Number of [c]lients                   (%i)\n"+
		Defines.PARAM_DEFAULT_CLIENTS);
	System.out.println("    n <UINT>   [n]umber of user queries/transaction  (%i)\n"+
		Defines.PARAM_DEFAULT_NUMBER);
	System.out.println("    q <UINT>   Percentage of relations [q]ueried     (%i)\n"+
		Defines.PARAM_DEFAULT_QUERIES);
	System.out.println("    r <UINT>   Number of possible [r]elations        (%i)\n"+
		Defines.PARAM_DEFAULT_RELATIONS);
	System.out.println("    t <UINT>   Number of [t]ransactions              (%i)\n"+
		Defines.PARAM_DEFAULT_TRANSACTIONS);
	System.out.println("    u <UINT>   Percentage of [u]ser transactions     (%i)\n"+
		Defines.PARAM_DEFAULT_USER);
	System.exit(1);
}

int CLIENTS;
int NUMBER;
int QUERIES;
int RELATIONS;
int TRANSACTIONS;
int USER;

public void setDefaultParams () {
	CLIENTS      = Defines.PARAM_DEFAULT_CLIENTS;
	NUMBER       = Defines.PARAM_DEFAULT_NUMBER;
	QUERIES      = Defines.PARAM_DEFAULT_QUERIES;
	RELATIONS    = Defines.PARAM_DEFAULT_RELATIONS;
	TRANSACTIONS = Defines.PARAM_DEFAULT_TRANSACTIONS;
	USER         = Defines.PARAM_DEFAULT_USER;
}

public void parseArgs (String argv[]) {
	int opterr = 0;

	setDefaultParams();
	for(int i=0;i<argv.length;i++) {
		String arg=argv[i];
		if (arg.equals("-c"))
			CLIENTS=Integer.parseInt(argv[++i]);
		else if (arg.equals("-n"))
			NUMBER=Integer.parseInt(argv[++i]);
		else if (arg.equals("-q"))
			QUERIES=Integer.parseInt(argv[++i]);
		else if (arg.equals("-r"))
			RELATIONS=Integer.parseInt(argv[++i]);
		else if (arg.equals("-t"))
			TRANSACTIONS=Integer.parseInt(argv[++i]);
		else if (arg.equals("-u"))
			USER=Integer.parseInt(argv[++i]);
		else 
			opterr++;
	}

	if (opterr>0) {
		displayUsage(argv[0]);
	}
}

public static boolean addCustomer (Manager managerPtr, int id, int num, int price) {
	Integer idInteger = (Integer) id;
	Boolean addCustomer = STMRTS.atomic(managerPtr.manager_addCustomer(idInteger));
	return addCustomer;
}

public Manager initializeManager () {
	int i;
	int t;
	System.out.println("Initializing manager... ");

	Random randomPtr = new Random();
	randomPtr.random_alloc();
	Manager managerPtr = new Manager();

	int numRelation = RELATIONS;
	int ids[] = new int[numRelation];
	for (i = 0; i < numRelation; i++) {
		ids[i] = i + 1;
	}

	for (t = 0; t < 4; t++) {
		for (i = 0; i < numRelation; i++) {
			int x = randomPtr.posrandom_generate() % numRelation;
			int y = randomPtr.posrandom_generate() % numRelation;
			int tmp = ids[x];
			ids[x] = ids[y];
			ids[y] = tmp;
		}

		for (i = 0; i < numRelation; i++) {
			boolean status;
			int id = (Integer) ids[i];
			int num = (Integer) ((randomPtr.posrandom_generate() % 5) + 1) * 100;
			int price = (Integer) ((randomPtr.posrandom_generate() % 5) * 10) + 50;
			if (t==0) {
				status=STMRTS.atomic(managerPtr.manager_addCar(id, num, price));
			} else if (t==1) {
				status=STMRTS.atomic(managerPtr.manager_addFlight(id, num, price));
			} else if (t==2) {
				status=STMRTS.atomic(managerPtr.manager_addRoom(id, num, price));
			} else if (t==3) {
				status=STMRTS.atomic(managerPtr.manager_addCustomer(id));
			}

		}
	}
	System.out.println("done.");
	return managerPtr;
}

public Client[] initializeClients (Manager managerPtr) {
	Random randomPtr;
	Client clients[];
	int i;
	int numClient = CLIENTS;
	int numTransaction = TRANSACTIONS;
	int numTransactionPerClient;
	int numQueryPerTransaction = NUMBER;
	int numRelation = RELATIONS;
	int percentQuery = QUERIES;
	int queryRange;
	int percentUser = USER;



	System.out.println("Initializing clients... ");

	randomPtr = new Random();
	randomPtr.random_alloc();

	clients = new Client[numClient];

	numTransactionPerClient = (int)((double)numTransaction / (double)numClient + 0.5);
	queryRange = (int)((double)percentQuery / 100.0 * (double)numRelation + 0.5);

	for (i = 0; i < numClient; i++) {
		clients[i] = new Client(i,
			managerPtr,
			numTransactionPerClient,
			numQueryPerTransaction,
			queryRange,
			percentUser);
	}

	System.out.println("done.");
	System.out.println("    Transactions        = "+ numTransaction);
	System.out.println("    Clients             = "+ numClient);
	System.out.println("    Transactions/client = "+ numTransactionPerClient);
	System.out.println("    Queries/transaction = "+ numQueryPerTransaction);
	System.out.println("    Relations           = "+ numRelation);
	System.out.println("    Query percent       = "+ percentQuery);
	System.out.println("    Query range         = "+ queryRange);
	System.out.println("    Percent user        = "+ percentUser);

	return clients;
}

public static void main(String argv[]) {
	Manager managerPtr;
	Client clients[];
	long start;
	long stop;
	
	Vacation vac=new Vacation();
	vac.parseArgs(argv);
	managerPtr = vac.initializeManager();
	clients = vac.initializeClients(managerPtr);
	int numThread = vac.CLIENTS;

	System.out.println("Running clients... ");

	for(int i=1;i<numThread;i++) {
		clients[i].start();
	}

	start=System.currentTimeMillis();
	clients[0].run();
	stop=System.currentTimeMillis();

	System.out.print("done.");
	long diff=stop-start;
	System.out.println("TIME="+diff);
    vac.checkTables(managerPtr);
	
	System.out.println("Deallocating memory... ");
   System.out.println("done.");
}

void checkTables (Manager managerPtr) {
	int i;
	int numRelation = RELATIONS;

	RedBlackTree<Customer> customerTablePtr = STMRTS.atomic(managerPtr.getCustomerTablePtr());
	RedBlackTree<Reservation>[] tables = new RedBlackTree[3];
	tables[0] = STMRTS.atomic(managerPtr.getCarTablePtr());
	tables[1] = STMRTS.atomic(managerPtr.getFlightTablePtr());
	tables[2] = STMRTS.atomic(managerPtr.getRoomTablePtr());
	int numTable = 3;
	Boolean status;
	int t;

	System.out.println("Checking tables... ");

	int percentQuery = QUERIES;
	int queryRange = (int)((double)percentQuery / 100.0 * (double)numRelation + 0.5);
	int maxCustomerId = queryRange + 1;

	for (i = 1; i <= maxCustomerId; i++) {
		TreeNode<Customer> node = STMRTS.atomic(customerTablePtr.locateTree(customerTablePtr, i));
		Customer c = STMRTS.atomic(node.getObject());
		if (c!=null) {
			Boolean removed = STMRTS.atomic(customerTablePtr.removeTree(i));
		}
	}

	for (t = 0; t < numTable; t++) {
		RedBlackTree<Reservation> tablePtr = tables[t];
		for (i = 1; i <= numRelation; i++) {
			TreeNode<Reservation> node = STMRTS.atomic(tables[t].locateTree(tables[t], i));
			Reservation r = STMRTS.atomic(node.getObject());
			if (r!=null) {
				if (t==0) {
					status=STMRTS.atomic(managerPtr.manager_addCar(i,0,0));
				} else if (t==1) {
					status=STMRTS.atomic(managerPtr.manager_addFlight(i, 0, 0));
				} else if (t==2) {
					status=STMRTS.atomic(managerPtr.manager_addRoom(i,0,0));
				}
				Boolean removed = STMRTS.atomic(tablePtr.removeTree(i));
			}
		}
	}

	System.out.println("done.");
}
}  



